// Fichier : server.js
// Description : Un serveur GraphQL complet avec Apollo Server pour une application de liste de tÃ¢ches.

// Ã‰tape 1 : Importer les dÃ©pendances nÃ©cessaires
// '@apollo/server' : La bibliothÃ¨que principale pour crÃ©er notre serveur GraphQL.
// 'startStandaloneServer' : Une fonction d'aide pour dÃ©marrer rapidement le serveur.
import { ApolloServer } from '@apollo/server';
import { startStandaloneServer } from '@apollo/server/standalone';

// Ã‰tape 2 : DÃ©finir le SchÃ©ma (Schema) GraphQL
// C'est le "contrat" de notre API. Il dÃ©crit :
// - Les types de donnÃ©es (ex: Todo).
// - Les requÃªtes possibles pour lire les donnÃ©es (Query).
// - Les opÃ©rations possibles pour modifier les donnÃ©es (Mutation).
// Le '!' signifie que le champ est obligatoire (non-nul).
const typeDefs = `#graphql
  # Le type 'Todo' reprÃ©sente une seule tÃ¢che dans notre liste.
  type Todo {
    id: ID!
    text: String!
    completed: Boolean!
  }

  # Le type 'Query' dÃ©finit toutes les faÃ§ons de lire des donnÃ©es.
  type Query {
    # 'todos' renvoie une liste de toutes les tÃ¢ches.
    todos: [Todo]
    # 'todo' renvoie une seule tÃ¢che en fonction de son ID.
    todo(id: ID!): Todo
  }

  # Le type 'Mutation' dÃ©finit toutes les faÃ§ons de modifier des donnÃ©es.
  type Mutation {
    # 'addTodo' ajoute une nouvelle tÃ¢che et la renvoie.
    addTodo(text: String!): Todo
    # 'updateTodo' met Ã  jour le statut 'completed' d'une tÃ¢che.
    updateTodo(id: ID!, completed: Boolean!): Todo
    # 'deleteTodo' supprime une tÃ¢che et renvoie la tÃ¢che supprimÃ©e.
    deleteTodo(id: ID!): Todo
  }
`;

// Ã‰tape 3 : Notre source de donnÃ©es (en mÃ©moire pour cet exemple)
// Dans une application rÃ©elle, ces donnÃ©es proviendraient d'une base de donnÃ©es (SQL, MongoDB, etc.).
let todos = [
  { id: '1', text: 'Apprendre les bases de GraphQL', completed: true },
  { id: '2', text: 'Construire mon premier serveur', completed: false },
  { id: '3', text: 'ConquÃ©rir le monde', completed: false },
];
let nextId = 4; // Pour gÃ©nÃ©rer de nouveaux IDs simplement

// Ã‰tape 4 : Les RÃ©solveurs (Resolvers)
// Ce sont les fonctions qui exÃ©cutent la logique pour chaque requÃªte et mutation dÃ©finie dans notre schÃ©ma.
// La structure de l'objet 'resolvers' doit correspondre exactement Ã  la structure de 'typeDefs'.
const resolvers = {
  // RÃ©solveurs pour les requÃªtes de type 'Query'
  Query: {
    // La fonction pour la requÃªte 'todos'
    todos: () => todos,
    // La fonction pour la requÃªte 'todo'. 
    // Le premier argument est 'parent', le second 'args' contient les paramÃ¨tres passÃ©s (ici, 'id').
    todo: (parent, args) => todos.find(todo => todo.id === args.id),
  },

  // RÃ©solveurs pour les opÃ©rations de type 'Mutation'
  Mutation: {
    // La fonction pour la mutation 'addTodo'
    addTodo: (parent, args) => {
      const newTodo = {
        id: String(nextId++),
        text: args.text,
        completed: false,
      };
      todos.push(newTodo);
      return newTodo;
    },
    // La fonction pour la mutation 'updateTodo'
    updateTodo: (parent, args) => {
      const todo = todos.find(todo => todo.id === args.id);
      if (!todo) return null; // Si la tÃ¢che n'est pas trouvÃ©e
      todo.completed = args.completed;
      return todo;
    },
    // La fonction pour la mutation 'deleteTodo'
    deleteTodo: (parent, args) => {
      const todoIndex = todos.findIndex(todo => todo.id === args.id);
      if (todoIndex === -1) return null; // Si la tÃ¢che n'est pas trouvÃ©e
      const [deletedTodo] = todos.splice(todoIndex, 1);
      return deletedTodo;
    },
  },
};


// Ã‰tape 5 : CrÃ©er une instance du serveur Apollo
const server = new ApolloServer({
  typeDefs,
  resolvers,
});

// Ã‰tape 6 : DÃ©marrer le serveur
// La fonction 'startStandaloneServer' lance un serveur web et le rend accessible.
const { url } = await startStandaloneServer(server, {
  listen: { port: 4000 },
});

console.log(`ðŸš€  Serveur prÃªt Ã  l'adresse : ${url}`);
